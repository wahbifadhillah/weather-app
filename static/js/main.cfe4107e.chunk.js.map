{"version":3,"sources":["components/weather/styles.module.scss","components/weather/weather.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","WeatherCard","weatherData","iconurl","weather","icon","hour","moment","daystat","className","styles","wrapper","day","night","card","city","name","dawndusk","sunrise","sys","format","sunset","weathericon","src","alt","temp","main","weathername","dayData","date","time","App","useState","lat","setLat","long","setLong","data","setData","useEffect","fetchData","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,sBAAsB,KAAO,qBAAqB,KAAO,qBAAqB,SAAW,yBAAyB,KAAO,qBAAqB,YAAc,4BAA4B,QAAU,wBAAwB,IAAM,oBAAoB,QAAU,wBAAwB,YAAc,8B,kLC6CjVC,EAzCK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAEZC,EAAU,oCADCD,EAAYE,QAAQ,GAAGC,KACyB,UAC3DC,EAAOC,MAASD,OAClBE,EAAU,MAUd,OATQF,GAAQ,IACRE,EAAU,OAEVF,EAAO,KACPE,EAAU,SAEVF,EAAO,IACPE,EAAU,SAGd,qBAAKC,UAAS,UAAKC,IAAOC,QAAZ,YAAkC,OAAXH,EAAmBE,IAAOE,IAAIF,IAAOG,OAA1E,SACI,sBAAKJ,UAAWC,IAAOI,KAAvB,UACI,qBAAKL,UAAWC,IAAOK,KAAvB,SACKb,EAAYc,OAEjB,sBAAKP,UAAWC,IAAOO,SAAvB,UACI,sBAAKR,UAAWC,IAAOQ,QAAvB,sBAA0CX,IAA+B,IAAxBL,EAAYiB,IAAID,SAAcE,OAAO,SACtF,sBAAKX,UAAWC,IAAOW,OAAvB,qBAAwCd,IAA8B,IAAvBL,EAAYiB,IAAIE,QAAaD,OAAO,YAEvF,qBAAKX,UAAWC,IAAON,QAAvB,SAAgC,qBAAKK,UAAWC,IAAOY,YAAaC,IAAKpB,EAASqB,IAAI,mBACtF,sBAAKf,UAAWC,IAAOe,KAAvB,UACKvB,EAAYwB,KAAKD,KADtB,YAGA,qBAAKhB,UAAWC,IAAOiB,YAAvB,SACKzB,EAAYE,QAAQ,GAAGsB,OAE5B,sBAAKjB,UAAWC,IAAOkB,QAAvB,UACI,qBAAKnB,UAAWC,IAAOE,IAAvB,SAA6BL,MAASa,OAAO,SADjD,IAEI,qBAAKX,UAAWC,IAAOmB,KAAvB,SAA8BtB,MAASa,OAAO,WAFlD,IAGI,qBAAKX,UAAWC,IAAOoB,KAAvB,SAA8BvB,MAASa,OAAO,iBCrCnD,SAASW,IAEtB,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAkBA,OAhBAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDX,EAAOW,EAASC,OAAOC,UACvBX,EAAQS,EAASC,OAAOE,cAHV,SAMVC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDjB,EAAlD,gBAA6DE,EAA7D,+BAAwFe,qCAClGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAQgB,MATM,2CAAH,qDAYfd,MACC,CAACP,EAAIE,IAGN,qBAAK1B,UAAU,MAAf,SACwB,oBAAb4B,EAAKX,KACZ,cAAC,EAAD,CAASxB,YAAamC,IAEtB,0BC7BR,IAYekB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClC,EAAD,MAEFmC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cfe4107e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__32SMc\",\"night\":\"styles_night__1bP8E\",\"card\":\"styles_card__3rJyF\",\"city\":\"styles_city__2Ptyb\",\"dawndusk\":\"styles_dawndusk__3PNh0\",\"temp\":\"styles_temp__-AIhT\",\"weathername\":\"styles_weathername__DOS4e\",\"dayData\":\"styles_dayData__2WxpU\",\"day\":\"styles_day__ODG2r\",\"weather\":\"styles_weather__2OnFa\",\"weathericon\":\"styles_weathericon__1k_ag\"};","import React from 'react';\r\nimport styles from './styles.module.scss';\r\nimport moment from 'moment';\r\n\r\n\r\nconst WeatherCard = ({weatherData}) => {\r\n    const iconcode = weatherData.weather[0].icon;\r\n    const iconurl = \"http://openweathermap.org/img/wn/\" + iconcode + \"@4x.png\";\r\n    const hour = moment().hour();\r\n    let daystat = 'day';\r\n        if (hour >= 6){\r\n            daystat = 'day';\r\n        }\r\n        if (hour > 11){\r\n            daystat = 'night';\r\n        }\r\n        if (hour < 6){\r\n            daystat = 'night';\r\n        }\r\n    return(\r\n        <div className={`${styles.wrapper} ${daystat == 'day' ? styles.day:styles.night}`}>\r\n            <div className={styles.card}>    \r\n                <div className={styles.city}>\r\n                    {weatherData.name}\r\n                </div>\r\n                <div className={styles.dawndusk}>\r\n                    <div className={styles.sunrise}>Sunrise: {moment(weatherData.sys.sunrise*1000).format('LT')}</div>\r\n                    <div className={styles.sunset}>Sunset: {moment(weatherData.sys.sunset*1000).format('LT')}</div>\r\n                </div>\r\n                <div className={styles.weather}><img className={styles.weathericon} src={iconurl} alt=\"Weather icon\"/></div>\r\n                <div className={styles.temp}>\r\n                    {weatherData.main.temp} &deg;C\r\n                </div>\r\n                <div className={styles.weathername}>\r\n                    {weatherData.weather[0].main}\r\n                </div>\r\n                <div className={styles.dayData}>\r\n                    <div className={styles.day}>{moment().format('ddd')}</div>|\r\n                    <div className={styles.date}>{moment().format('MMM D')}</div>|\r\n                    <div className={styles.time}>{moment().format('LT')}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherCard;","import React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather/weather';\nexport default function App() {\n  \n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n      });\n    }\n    fetchData();\n  }, [lat,long])\n  \n  return (\n    <div className=\"App\">\n      {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div></div>\n      )}\n      \n    </div>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}